--- OOps/str_ops.c.orig
+++ OOps/str_ops.c
@@ -425,6 +425,9 @@ sprintf_opcode_(CSOUND *csound,
             int offs = outstring - str->data;
             str->data = csound->ReAlloc(csound, str->data,
                                  str->size  + 24);
+	    if(str->data == NULL){
+              return StrOp_ErrMsg(p, Str("memory allocation failure"));
+	    }
             str->size += 24;
             maxChars += 24;
             outstring = str->data + offs;
@@ -446,6 +449,9 @@ sprintf_opcode_(CSOUND *csound,
           if (strlen(strseg) + 24 > (unsigned)maxChars) {
             int offs = outstring - str->data;
             str->data = csound->ReAlloc(csound, str->data, str->size  + 13);
+	    if(str->data == NULL){
+              return StrOp_ErrMsg(p, Str("memory allocation failure"));
+	    }
             str->size += 24;
             maxChars += 24;
             outstring = str->data + offs;
@@ -467,6 +473,9 @@ sprintf_opcode_(CSOUND *csound,
             str->data = csound->ReAlloc(csound, str->data,
                                         str->size  + ((STRINGDAT*)parm)->size +
                                         strlen(strseg));
+	   if(str->data == NULL){
+              return StrOp_ErrMsg(p, Str("memory allocation failure"));
+	    }
             str->size += ((STRINGDAT*)parm)->size + strlen(strseg);
             maxChars += ((STRINGDAT*)parm)->size + strlen(strseg);
             outstring = str->data + offs;
@@ -481,6 +490,9 @@ sprintf_opcode_(CSOUND *csound,
           /* safely detected excess string length */
             int offs = outstring - str->data;
             str->data = csound->ReAlloc(csound, str->data, maxChars*2);
+	    if(str->data == NULL){
+              return StrOp_ErrMsg(p, Str("memory allocation failure"));
+	    }
             outstring = str->data + offs;
             str->size = maxChars*2;
             maxChars += str->size;
@@ -512,7 +524,7 @@ sprintf_opcode_(CSOUND *csound,
 int sprintf_opcode(CSOUND *csound, SPRINTF_OP *p)
 {
     int size = p->sfmt->size+ 10*((int) p->INOCOUNT);
-    if (p->r->data == NULL && p->r->size < size) {
+    if (p->r->data == NULL || p->r->size < size) {
       /* this 10 is 1n incorrect guess which is OK with numbers*/
       p->r->data = csound->Calloc(csound, size);
       p->r->size = size;

